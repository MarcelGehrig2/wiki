// ITEM 12      Declare overriding functions override
// ////////////////////////////////////////////////////////////////////////////

// summary -------------------------------------------------------------------
// * override != overload
// * many mistakes with overriding are syntactically valid but have a different behaviour than probably intended
// * declaring a function as 'override' prevents it from accidentally being just an overload
// * good design practice: always use override if you want to override a function
//		virtual void mf1() override;

// basic overriding -----------------------------------------------------------
class Base {
public:
    virtual void doWork();      // virtual fct of base class
    ...
};

class Derived: public Base {
public:
    void doWork();              // override Base::doWork
    ...
};

// create base class pointer to derived class object (Item 21)
std::unique_ptr<Base> upb = std::make_unique<Derived>();
...
upb->doWork();          // derived class function is invoked


// requirements for overriding: ------------------------------------------------
// * The base class function must be virtual.
// * The base and derived function names must be identical (except in the case of destructors).
// * The parameter types of the base and derived functions must be identical.
// * The constness of the base and derived functions must be identical.
// * The return types and
// * The functionsâ€™ reference qualifiers must be identical
class Widget {
public:
    ...
    void doWork() &;        // this version of doWork applies only when *this is an lvalue
    void doWork() &&;       // this version of doWork applies only when *this is an rvalue
};

class Base {
public:
    virtual void mf1() const;
    virtual void mf2(int x);
    virtual void mf3() &;
    void mf4() const;
};

// non of the 4 following functions override the base functions. But they do overload them:
class Derived: public Base {
public:
virtual void mf1();                 // not const
virtual void mf2(unsigned int x);   // unsigned
virtual void mf3() &&;              // different reference qualifier
void mf4() const;                   // mf4() is not declared virtual in Base
};

// some compilers may provide warnings, but not all of them


// prevent accidental overload instead of override -----------------------------
// 'override' is a way to make explicit that a derived class function supposed to override a base class version.
class Derived: public Base {
public:
virtual void mf1() override;       // will not compile, because its only an overload, not an override
};
// this is especially useful if you later change a function declaration in the base class

// 'override' is a contextual keyword in C++11. But only if it is used at the end of a member function declaration.
class Warning {
public:
...
void override();        // legal
};
